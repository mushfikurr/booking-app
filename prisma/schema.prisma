generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  email          String?       @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  businessUser   BusinessUser?
  bookings       Booking[]

  @@index([email])
}

model OpeningHour {
  id         Int          @id @default(autoincrement())
  businessId String
  business   BusinessUser @relation(fields: [businessId], references: [id])
  dayOfWeek  String       
  startTime  DateTime
  endTime    DateTime

  @@index([businessId])
}

model BusinessUser {
  id             String        @id @default(cuid())
  streetAddress1 String
  streetAddress2 String?
  postcode       String
  phoneNumber    String
  instagram      String?
  profileId      String        @unique
  businessEmail  String        @unique
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  services       Service[]
  bookings       Booking[]
  openingHours   OpeningHour[]

  @@index([userId])
  @@index([businessEmail])
}

model Service {
  id             String       @id @default(cuid())
  name           String       @unique
  description    String?
  price          String
  estimatedTime  Int
  businessUserId String
  businessUser   BusinessUser @relation(fields: [businessUserId], references: [id])
  booking        Booking[]

  @@index([businessUserId])
}

model Booking {
  id             String       @id @default(cuid())
  date           DateTime
  services       Service[]
  userId         String
  businessUserId String
  user           User?        @relation(fields: [userId], references: [id])
  businessUser   BusinessUser @relation(fields: [businessUserId], references: [id])

  @@index([userId])
  @@index([businessUserId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
